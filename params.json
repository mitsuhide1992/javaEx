{"name":"Thinking In Java","tagline":"Thinking In Java Blog","body":"* Class对象：\r\n* 每个类对应一个class对象，保存在同名的.class文件中。为了生成该类的对象，JVM将使用类加载器的子系统。\r\n* 类加载器子系统包含类加载器链，只有一个原生类加载器（root），是JVM实现的一部分。原生加载器加载的是java可信类，包括java API，从本地磁盘加载。\r\n* 所有类都是在第一次使用时，动态加载到JVM的。程序创建第一个静态成员引用时，就加载这个类。这证明构造器也是静态方法，使用new操作符也是对静态成员的引用。\r\n* java的每个类并非在运行前全部加载，是按需加载的。\r\n* Class.forName(\"Gum\") ,forName是取得Class对象引用的一种方法，也会引用参数类。\r\n\r\n* 使用.class创建对Class对象引用时，为类做的准备工作有三阶段：\r\n* 1、加载\r\n* 查找字节码，通常在classpath路径中查找，并从这些字节码创建一个对象\r\n* 2、链接\r\n* 链接阶段验证类中的字节码，为静态域分配存储空间，如果必须的话，将解析这个类创建的对其他类的引用。\r\n* 3、初始化\r\n* 若该类有父类，则执行父类初始化，执行静态初始化器和初始化块。\r\n* 初始化被延迟到对静态方法或非常数静态域首次引用时才执行。\r\n* 创建一个对象\r\n* Class type = Class.forName(\"\");\r\n* type.newInstance();\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}